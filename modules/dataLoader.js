/**
 * modules/dataLoader.js
 * Handles fetching and parsing map data from the JSON file generated by the Python converter.
 */

/**
 * Asynchronously loads map data from a JSON file.
 * The JSON file is expected to contain both pre-calculated scores/tiers
 * and the raw tile attributes needed for potential frontend calculations.
 *
 * @param {string} url - The URL or path to the map data JSON file (e.g., 'civ_map_data.json').
 * @returns {Promise<object|null>} A promise that resolves with the parsed map data object
 * (containing 'metadata' and 'tiles' keys), or null if an error occurs.
 */
export async function loadMapData(url) {
    console.log(`Attempting to load map data from: ${url}`);
    const loadingIndicator = document.getElementById('loading-indicator'); // Get indicator element

    try {
        const response = await fetch(url);

        // Check if the request was successful (status code 200-299)
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status} - ${response.statusText}`);
        }

        // Parse the JSON response body
        const data = await response.json();
        console.log("Map data fetched successfully. Validating structure...");

        // Basic validation: Check for expected top-level keys
        if (!data || typeof data !== 'object' || !data.metadata || !Array.isArray(data.tiles)) {
            throw new Error("Invalid map data format: Missing 'metadata' or 'tiles' array.");
        }

        console.log(`Map data loaded and validated successfully. Found ${data.tiles.length} tiles.`);

        // Optionally hide or update loading indicator on success
        if (loadingIndicator) {
            loadingIndicator.style.display = 'none'; // Hide indicator on success
        }

        return data; // Return the complete parsed data object

    } catch (error) {
        console.error("Failed to load or parse map data:", error);

        // Display a user-friendly error message on the page
        if (loadingIndicator) {
            loadingIndicator.textContent = `Error loading map: ${error.message}`;
            loadingIndicator.style.color = "red";
            loadingIndicator.style.display = 'block'; // Ensure it's visible
        }
        return null; // Indicate failure by returning null
    }
}
